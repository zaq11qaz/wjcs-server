package com.huihe.eg.user.service.impl;

import com.cy.framework.service.impl.BaseFrameworkServiceImpl;
import com.google.common.collect.Lists;
import com.huihe.eg.user.model.BusinessActivityTypeEntity;
import com.huihe.eg.user.model.BusinessMechanismActivityTypeEntity;
import com.huihe.eg.user.model.RechargeRecordEntity;
import com.huihe.eg.user.mybatis.dao.BusinessActivityTypeMapper;
import com.huihe.eg.user.mybatis.dao.BusinessMechanismActivityTypeMapper;
import com.huihe.eg.user.service.dao.BusinessActivityTypeService;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Service
public class BusinessActivityTypeServiceImpl extends BaseFrameworkServiceImpl<BusinessActivityTypeEntity, Integer> implements BusinessActivityTypeService {

    @Resource
    private BusinessActivityTypeMapper mapper;
    @Resource
    private BusinessMechanismActivityTypeMapper businessMechanismActivityTypeMapper;

    public void init() {
        setMapper(mapper);
    }

    @Override
    public List<BusinessActivityTypeEntity> queryNoRepeat(BusinessActivityTypeEntity param, HttpServletRequest request, HttpServletResponse response) {
        List<BusinessActivityTypeEntity> list = Lists.newArrayList();
        try {
            list = mapper.queryNoRepeat(param);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public List<BusinessActivityTypeEntity> queryByMessage(BusinessActivityTypeEntity param, HttpServletRequest request, HttpServletResponse response) {
        List<BusinessActivityTypeEntity> list = Lists.newArrayList();
        try {
            list = mapper.queryByMessage(param);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public BigDecimal queryNeedPay(RechargeRecordEntity entity, HttpServletRequest request, HttpServletResponse response) {
        BusinessActivityTypeEntity businessActivityTypeEntity = mapper.selectByPrimaryKey(entity.getActivity_id().intValue());
        BusinessMechanismActivityTypeEntity businessMechanismActivityTypeEntity = businessMechanismActivityTypeMapper.selectByActivityId(businessActivityTypeEntity.getId().longValue());
        final Integer course_num = entity.getCourse_num();
        final Integer choose_num = businessActivityTypeEntity.getChoose_num();
        if (entity.getIs_teach_paypal()!=null && entity.getIs_teach_paypal() && !course_num.equals(choose_num)){
            return businessMechanismActivityTypeEntity.getSeparate_amount();
        }
        if (course_num <= choose_num) {
            return businessActivityTypeEntity.getPay_amount();
        } else {
            if (course_num > choose_num+1){
                return new BigDecimal("0");
            }
            return new BigDecimal(course_num - choose_num)
                    .multiply(businessActivityTypeEntity.getAdd_amount())
                    .add(businessActivityTypeEntity.getPay_amount());
        }
    }

}