<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huihe.eg.user.mybatis.dao.RechargeRecordMapper">
    <resultMap id="BaseResultMap" type="com.huihe.eg.user.model.RechargeRecordEntity">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_id" jdbcType="BIGINT" property="user_id"/>
        <result column="rcharge_abstract" jdbcType="VARCHAR" property="rcharge_abstract"/>
        <result column="rcharge_account" jdbcType="VARCHAR" property="rcharge_account"/>
        <result column="source" jdbcType="VARCHAR" property="source"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="rcharge_valid" jdbcType="VARCHAR" property="rcharge_valid"/>
        <result column="rcharge_time" jdbcType="TIMESTAMP" property="rcharge_time"/>
        <result column="flowing_no" jdbcType="VARCHAR" property="flowing_no"/>
        <result column="trans_no" jdbcType="VARCHAR" property="trans_no"/>
        <result column="finished_time" jdbcType="TIMESTAMP" property="finished_time"/>
        <result column="rcharge_type" jdbcType="VARCHAR" property="rcharge_type"/>
        <result column="selected_id" jdbcType="VARCHAR" property="selected_id"/>
        <result column="finished" jdbcType="BIT" property="finished"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="member_level" jdbcType="INTEGER" property="member_level"/>
        <result column="account" jdbcType="BIT" property="account"/>
        <result column="is_robot" jdbcType="BIT" property="is_robot"/>
        <result column="receipt_data" jdbcType="VARCHAR" property="receipt_data"/>
        <result column="member_duration" jdbcType="INTEGER" property="member_duration"/>
        <result column="study_type" jdbcType="VARCHAR" property="study_type"/>
        <result column="coupon_ids" jdbcType="VARCHAR" property="coupon_ids"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="course_num" jdbcType="INTEGER" property="course_num"/>
        <result column="number_of_lessons" jdbcType="INTEGER" property="number_of_lessons"/>
        <result column="studycard_id" jdbcType="BIGINT" property="studycard_id"/>
        <result column="coupon_id" jdbcType="BIGINT" property="coupon_id"/>
        <result column="class_card_id" jdbcType="BIGINT" property="class_card_id"/>
        <result column="appointment_id" jdbcType="BIGINT" property="appointment_id"/>
        <result column="user_appointment_id" jdbcType="BIGINT" property="user_appointment_id"/>
        <result column="mechanism_id" jdbcType="BIGINT" property="mechanism_id"/>
        <result column="master_id" jdbcType="BIGINT" property="master_id"/>
        <result column="activity_id" jdbcType="BIGINT" property="activity_id"/>
        <result column="pay_deposit_id" jdbcType="BIGINT" property="pay_deposit_id"/>
        <result column="user_study_card_id" jdbcType="BIGINT" property="user_study_card_id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="paying_for_identity" jdbcType="VARCHAR" property="paying_for_identity"/>
        <result column="payer_userid" jdbcType="VARCHAR" property="payer_userid"/>
        <result column="is_experience" jdbcType="BIT" property="is_experience"/>
        <result column="is_one_time_payment" jdbcType="BIT" property="is_one_time_payment"/>
        <result column="is_turning_long_orders" jdbcType="BIT" property="is_turning_long_orders"/>
        <result column="points" jdbcType="INTEGER" property="points"/>
        <result column="pay_type" jdbcType="VARCHAR" property="pay_type"/>
        <result column="out_request_no" jdbcType="VARCHAR" property="out_request_no"/>
        <result column="auth_no" jdbcType="VARCHAR" property="auth_no"/>
        <result column="operation_id" jdbcType="VARCHAR" property="operation_id"/>
        <result column="invite_code" jdbcType="VARCHAR" property="invite_code"/>
        <result column="is_free" jdbcType="BIT" property="is_free"/>
        <result column="is_teach_paypal" jdbcType="BIT" property="is_teach_paypal"/>
        <result column="is_settlement" jdbcType="BIT" property="is_settlement"/>
    </resultMap>
    <sql id="Base_Column_List">
        id,
        user_id,
        rcharge_abstract,
        rcharge_account,
        source,
        amount,
        rcharge_valid,
        rcharge_time,
        flowing_no,
        trans_no,
        finished_time,
        rcharge_type,
        selected_id,
        finished,
        is_teach_paypal,
        is_settlement,
        status,
        member_level,
        account,
        is_robot,
        receipt_data,
        member_duration,
        study_type,
        invite_code,
        coupon_ids,
        type,
        course_num,
        studycard_id,
        coupon_id,
        class_card_id,
        appointment_id,
        mechanism_id,
        title,
        master_id,
        is_experience,
        is_one_time_payment,
        paying_for_identity,
        payer_userid,
        user_study_card_id,
        is_turning_long_orders,
        points,
        pay_type,
        user_appointment_id,
        is_free,
        out_request_no,
        operation_id,
        auth_no,
        number_of_lessons,
        pay_deposit_id,
        activity_id
    </sql>
    <sql id="Base_Pay_User_List">
        u.avatar AS avatar , r.finished_time AS date , r.amount AS amount ,u.mobile AS phone ,u.nick_name AS nick_name , r.id AS id
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from eg_recharge_record
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from eg_recharge_record
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        insert into eg_recharge_record (id, user_id, rcharge_abstract,
                                        rcharge_account, source, amount,
                                        rcharge_valid, rcharge_time, flowing_no,
                                        trans_no, finished_time, rcharge_type,
                                        finished, status, member_level,
                                        account, receipt_data, member_duration,
                                        study_type, course_num, studycard_id,
                                        class_card_id, appointment_id)
        values (#{id,jdbcType=BIGINT}, #{user_id,jdbcType=BIGINT}, #{rcharge_abstract,jdbcType=VARCHAR},
                #{rcharge_account,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL},
                #{rcharge_valid,jdbcType=VARCHAR}, #{rcharge_time,jdbcType=TIMESTAMP}, #{flowing_no,jdbcType=VARCHAR},
                #{trans_no,jdbcType=VARCHAR}, #{finished_time,jdbcType=TIMESTAMP}, #{rcharge_type,jdbcType=VARCHAR},
                #{finished,jdbcType=BIT}, #{status,jdbcType=INTEGER}, #{member_level,jdbcType=INTEGER},
                #{account,jdbcType=BIT}, #{receipt_data,jdbcType=VARCHAR}, #{member_duration,jdbcType=INTEGER},
                #{study_type,jdbcType=VARCHAR}, #{course_num,jdbcType=INTEGER}, #{studycard_id,jdbcType=BIGINT},
                #{class_card_id,jdbcType=BIGINT}, #{appointment_id,jdbcType=BIGINT})
    </insert>
    <insert id="insertSelective" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            useGeneratedKeys="true" keyProperty="id">
        insert into eg_recharge_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="user_id != null">
                user_id,
            </if>
            <if test="rcharge_abstract != null">
                rcharge_abstract,
            </if>
            <if test="rcharge_account != null">
                rcharge_account,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="rcharge_valid != null">
                rcharge_valid,
            </if>
            <if test="rcharge_time != null">
                rcharge_time,
            </if>
            <if test="flowing_no != null">
                flowing_no,
            </if>
            <if test="trans_no != null">
                trans_no,
            </if>
            <if test="finished_time != null">
                finished_time,
            </if>
            <if test="rcharge_type != null">
                rcharge_type,
            </if>
            <if test="selected_id != null">
                selected_id,
            </if>
            <if test="finished != null">
                finished,
            </if>
            <if test="is_teach_paypal != null">
                is_teach_paypal,
            </if>
            <if test="is_settlement != null">
                is_settlement,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="member_level != null">
                member_level,
            </if>
            <if test="account != null">
                account,
            </if>
            <if test="is_robot != null">
                is_robot,
            </if>
            <if test="receipt_data != null">
                receipt_data,
            </if>
            <if test="member_duration != null">
                member_duration,
            </if>
            <if test="study_type != null">
                study_type,
            </if>
            <if test="invite_code != null">
                invite_code,
            </if>
            <if test="coupon_ids != null">
                coupon_ids,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="course_num != null">
                course_num,
            </if>
            <if test="number_of_lessons != null">
                number_of_lessons,
            </if>
            <if test="studycard_id != null">
                studycard_id,
            </if>
            <if test="coupon_id != null">
                coupon_id,
            </if>
            <if test="class_card_id != null">
                class_card_id,
            </if>
            <if test="appointment_id != null">
                appointment_id,
            </if>
            <if test="user_appointment_id != null">
                user_appointment_id,
            </if>
            <if test="mechanism_id != null">
                mechanism_id,
            </if>
            <if test="master_id != null">
                master_id,
            </if>
            <if test="is_experience != null">
                is_experience,
            </if>
            <if test="is_one_time_payment != null">
                is_one_time_payment,
            </if>
            <if test="paying_for_identity != null">
                paying_for_identity,
            </if>
            <if test="payer_userid != null">
                payer_userid,
            </if>
            <if test="user_study_card_id != null">
                user_study_card_id,
            </if>
            <if test="points != null">
                points,
            </if>
            <if test="pay_type != null">
                pay_type,
            </if>
            <if test="is_free != null">
                is_free,
            </if>
            <if test="out_request_no != null">
                out_request_no,
            </if>
            <if test="auth_no != null">
                auth_no,
            </if>
            <if test="operation_id != null">
                operation_id,
            </if>
            <if test="activity_id != null">
                activity_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="user_id != null">
                #{user_id,jdbcType=BIGINT},
            </if>
            <if test="rcharge_abstract != null">
                #{rcharge_abstract,jdbcType=VARCHAR},
            </if>
            <if test="rcharge_account != null">
                #{rcharge_account,jdbcType=VARCHAR},
            </if>
            <if test="source != null">
                #{source,jdbcType=VARCHAR},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="rcharge_valid != null">
                #{rcharge_valid,jdbcType=VARCHAR},
            </if>
            <if test="rcharge_time != null">
                #{rcharge_time,jdbcType=TIMESTAMP},
            </if>
            <if test="flowing_no != null">
                #{flowing_no,jdbcType=VARCHAR},
            </if>
            <if test="trans_no != null">
                #{trans_no,jdbcType=VARCHAR},
            </if>
            <if test="finished_time != null">
                #{finished_time,jdbcType=TIMESTAMP},
            </if>
            <if test="rcharge_type != null">
                #{rcharge_type,jdbcType=VARCHAR},
            </if>
            <if test="selected_id != null">
                #{selected_id,jdbcType=VARCHAR},
            </if>
            <if test="finished != null">
                #{finished,jdbcType=BIT},
            </if>
            <if test="is_teach_paypal != null">
                #{is_teach_paypal,jdbcType=BIT},
            </if>
            <if test="is_settlement != null">
                #{is_settlement,jdbcType=BIT},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="member_level != null">
                #{member_level,jdbcType=INTEGER},
            </if>
            <if test="account != null">
                #{account,jdbcType=BIT},
            </if>
            <if test="is_robot != null">
                #{is_robot,jdbcType=BIT},
            </if>
            <if test="receipt_data != null">
                #{receipt_data,jdbcType=VARCHAR},
            </if>
            <if test="member_duration != null">
                #{member_duration,jdbcType=INTEGER},
            </if>
            <if test="study_type != null">
                #{study_type,jdbcType=VARCHAR},
            </if>
            <if test="invite_code != null">
                #{invite_code,jdbcType=VARCHAR},
            </if>
            <if test="coupon_ids != null">
                #{coupon_ids,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="course_num != null">
                #{course_num,jdbcType=INTEGER},
            </if>
            <if test="number_of_lessons != null">
                #{number_of_lessons,jdbcType=INTEGER},
            </if>
            <if test="studycard_id != null">
                #{studycard_id,jdbcType=BIGINT},
            </if>
            <if test="coupon_id != null">
                #{coupon_id,jdbcType=BIGINT},
            </if>
            <if test="class_card_id != null">
                #{class_card_id,jdbcType=BIGINT},
            </if>
            <if test="appointment_id != null">
                #{appointment_id,jdbcType=BIGINT},
            </if>
            <if test="user_appointment_id != null">
                #{user_appointment_id,jdbcType=BIGINT},
            </if>
            <if test="mechanism_id != null">
                #{mechanism_id,jdbcType=BIGINT},
            </if>
            <if test="master_id != null">
                #{master_id,jdbcType=BIGINT},
            </if>
            <if test="is_experience != null">
                #{is_experience,jdbcType=BIT},
            </if>
            <if test="is_one_time_payment != null">
                #{is_one_time_payment,jdbcType=BIT},
            </if>
            <if test="paying_for_identity != null">
                #{paying_for_identity,jdbcType=VARCHAR},
            </if>
            <if test="payer_userid != null">
                #{payer_userid,jdbcType=VARCHAR},
            </if>
            <if test="user_study_card_id != null">
                #{user_study_card_id,jdbcType=BIGINT},
            </if>
            <if test="points != null">
                #{points,jdbcType=INTEGER},
            </if>
            <if test="pay_type != null">
                #{pay_type,jdbcType=VARCHAR},
            </if>
            <if test="is_free != null">
                #{is_free,jdbcType=BIT},
            </if>
            <if test="out_request_no != null">
                #{out_request_no,jdbcType=VARCAHR},
            </if>
            <if test="auth_no != null">
                #{auth_no,jdbcType=VARCAHR},
            </if>
            <if test="operation_id != null">
                #{operation_id,jdbcType=VARCAHR},
            </if>
            <if test="activity_id != null">
                #{activity_id,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <insert id="insertRobot" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            useGeneratedKeys="true" keyProperty="id"
    >
        INSERT INTO eg_recharge_record( `user_id`, `rcharge_abstract`, `rcharge_account`, `source`, `amount`,
        `rcharge_valid`, `rcharge_time`, `flowing_no`, `out_request_no`, `trans_no`, `finished_time`, `rcharge_type`,
        `finished`, `status`, `member_level`, `account`, `receipt_data`, `member_duration`, `study_type`, `course_num`,
        `studycard_id`, `class_card_id`, `appointment_id`, `coupon_id`, `mechanism_id`, `master_id`, `title`,
        `is_experience`, `is_one_time_payment`, `paying_for_identity`, `payer_userid`, `user_study_card_id`,
        `is_turning_long_orders`, `points`, `pay_type`, `user_appointment_id`, `is_free`, `auth_no`, `operation_id`,
        <if test="activity_id != null">
            activity_id,
        </if>
        `type`, `number_of_lessons`, `temporary_amount`, `pay_deposit_id`, `is_teach_paypal`, `coupon_ids`,
        `invite_code`, `is_settlement`, `selected_id`,`is_robot`) VALUES ( FLOOR(
        5000 + ( RAND() * 1000 )), '微信小程序优学卡购买', '', 'teach_paypal', CASE
        RAND()*2>1
        WHEN '1' THEN
        298 ELSE 398
        END, '011N2t0w3KZieW2MMh0w3TOmTO2N2t0V',NOW(), 'FK20210420164221199212563237', '', '',NOW(), 'coupon_198', 1, 0,
        0, 1, '', 0, '', 2, 0, 0, 0, 0, 0, 0, '', 0, b'1', '', '', 0, b'0', 0, 'wx', 0, b'0', '', '',
        <if test="activity_id != null">
            #{activity_id,jdbcType=BIGINT},
        </if>
        'single_session', 0, 0.00, 0, b'0', '', '', b'1', '572,569',TRUE);
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        update eg_recharge_record
        <set>
            <if test="user_id != null">
                user_id = #{user_id,jdbcType=BIGINT},
            </if>
            <if test="rcharge_abstract != null">
                rcharge_abstract = #{rcharge_abstract,jdbcType=VARCHAR},
            </if>
            <if test="rcharge_account != null">
                rcharge_account = #{rcharge_account,jdbcType=VARCHAR},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=VARCHAR},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="rcharge_valid != null">
                rcharge_valid = #{rcharge_valid,jdbcType=VARCHAR},
            </if>
            <if test="rcharge_time != null">
                rcharge_time = #{rcharge_time,jdbcType=TIMESTAMP},
            </if>
            <if test="flowing_no != null">
                flowing_no = #{flowing_no,jdbcType=VARCHAR},
            </if>
            <if test="trans_no != null">
                trans_no = #{trans_no,jdbcType=VARCHAR},
            </if>
            <if test="finished_time != null">
                finished_time = #{finished_time,jdbcType=TIMESTAMP},
            </if>
            <if test="rcharge_type != null">
                rcharge_type = #{rcharge_type,jdbcType=VARCHAR},
            </if>
            <if test="selected_id != null">
                selected_id = #{selected_id,jdbcType=VARCHAR},
            </if>
            <if test="finished != null">
                finished = #{finished,jdbcType=BIT},
            </if>
            <if test="is_teach_paypal != null">
                is_teach_paypal = #{is_teach_paypal,jdbcType=BIT},
            </if>
            <if test="is_settlement != null">
                is_settlement = #{is_settlement,jdbcType=BIT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="member_level != null">
                member_level = #{member_level,jdbcType=INTEGER},
            </if>
            <if test="account != null">
                account = #{account,jdbcType=BIT},
            </if>
            <if test="is_robot != null">
                is_robot = #{is_robot,jdbcType=BIT},
            </if>
            <if test="receipt_data != null">
                receipt_data = #{receipt_data,jdbcType=VARCHAR},
            </if>
            <if test="member_duration != null">
                member_duration = #{member_duration,jdbcType=INTEGER},
            </if>
            <if test="study_type != null">
                study_type = #{study_type,jdbcType=VARCHAR},
            </if>
            <if test="invite_code != null">
                invite_code = #{invite_code,jdbcType=VARCHAR},
            </if>
            <if test="coupon_ids != null">
                coupon_ids = #{coupon_ids,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="course_num != null">
                course_num = #{course_num,jdbcType=INTEGER},
            </if>
            <if test="number_of_lessons != null">
                number_of_lessons = #{number_of_lessons,jdbcType=INTEGER},
            </if>
            <if test="studycard_id != null">
                studycard_id = #{studycard_id,jdbcType=BIGINT},
            </if>
            <if test="coupon_id != null">
                coupon_id = #{coupon_id,jdbcType=BIGINT},
            </if>
            <if test="class_card_id != null">
                class_card_id = #{class_card_id,jdbcType=BIGINT},
            </if>
            <if test="appointment_id != null">
                appointment_id = #{appointment_id,jdbcType=BIGINT},
            </if>
            <if test="user_appointment_id != null">
                user_appointment_id = #{user_appointment_id,jdbcType=BIGINT},
            </if>
            <if test="mechanism_id != null">
                mechanism_id = #{mechanism_id,jdbcType=BIGINT},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="master_id != null">
                master_id = #{master_id,jdbcType=BIGINT},
            </if>
            <if test="pay_deposit_id != null">
                pay_deposit_id = #{pay_deposit_id,jdbcType=BIGINT},
            </if>
            <if test="pay_deposit_id != null">
                pay_deposit_id = #{pay_deposit_id,jdbcType=BIGINT},
            </if>
            <if test="paying_for_identity != null">
                paying_for_identity = #{paying_for_identity,jdbcType=VARCHAR},
            </if>
            <if test="payer_userid != null">
                payer_userid = #{payer_userid,jdbcType=VARCHAR},
            </if>
            <if test="user_study_card_id != null">
                user_study_card_id = #{user_study_card_id,jdbcType=BIGINT},
            </if>
            <if test="is_turning_long_orders != null">
                is_turning_long_orders = #{is_turning_long_orders,jdbcType=BIT},
            </if>
            <if test="points != null">
                points = #{points,jdbcType=INTEGER},
            </if>
            <if test="is_free != null">
                is_free = #{is_free,jdbcType=BIT},
            </if>
            <if test="out_request_no != null">
                out_request_no = #{out_request_no,jdbcType=VARCHAR},
            </if>
            <if test="auth_no != null">
                auth_no = #{auth_no,jdbcType=VARCHAR},
            </if>
            <if test="operation_id != null">
                operation_id = #{operation_id,jdbcType=VARCHAR},
            </if>
            <if test="activity_id != null">
                activity_id = #{activity_id,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        update eg_recharge_record
        set user_id           = #{user_id,jdbcType=BIGINT},
            rcharge_abstract  = #{rcharge_abstract,jdbcType=VARCHAR},
            rcharge_account   = #{rcharge_account,jdbcType=VARCHAR},
            source            = #{source,jdbcType=VARCHAR},
            amount            = #{amount,jdbcType=DECIMAL},
            rcharge_valid     = #{rcharge_valid,jdbcType=VARCHAR},
            rcharge_time      = #{rcharge_time,jdbcType=TIMESTAMP},
            flowing_no        = #{flowing_no,jdbcType=VARCHAR},
            trans_no          = #{trans_no,jdbcType=VARCHAR},
            finished_time     = #{finished_time,jdbcType=TIMESTAMP},
            rcharge_type      = #{rcharge_type,jdbcType=VARCHAR},
            finished          = #{finished,jdbcType=BIT},
            status            = #{status,jdbcType=INTEGER},
            member_level      = #{member_level,jdbcType=INTEGER},
            account           = #{account,jdbcType=BIT},
            receipt_data      = #{receipt_data,jdbcType=VARCHAR},
            member_duration   = #{member_duration,jdbcType=INTEGER},
            study_type        = #{study_type,jdbcType=VARCHAR},
            type              = #{type,jdbcType=VARCHAR},
            course_num        = #{course_num,jdbcType=INTEGER},
            number_of_lessons = #{number_of_lessons,jdbcType=INTEGER},
            studycard_id      = #{studycard_id,jdbcType=BIGINT},
            class_card_id     = #{class_card_id,jdbcType=BIGINT},
            appointment_id    = #{appointment_id,jdbcType=BIGINT},
            mechanism_id      = #{mechanism_id,jdbcType=VARCHAR},
            title             = #{title,jdbcType=VARCHAR},
            master_id         = #{master_id,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateNumberOfLesson">
        update eg_recharge_record
        set number_of_lessons = #{number_of_lessons}
        where user_study_card_id = #{id}
    </update>
    <update id="updateSettlement">
        update eg_recharge_record
        set is_settlement = true
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateRchStatus">
        update eg_recharge_record
        set member_level=1
        where id = (select id
                    from eg_recharge_record
                    where finished = true
                      AND rcharge_type = 'deposit'
                      AND user_id = #{param.user_id,jdbcType=BIGINT})
    </update>
    <select id="query" parameterType="com.huihe.eg.user.model.RechargeRecordEntity" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.is_settlement != null">
                AND is_settlement = #{param.is_settlement,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.invite_code != null">
                AND invite_code = #{param.invite_code,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
            <if test="param.activity_id != null">
                AND activity_id = #{param.activity_id,jdbcType=BIGINT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryListPage" parameterType="com.huihe.eg.user.model.RechargeRecordEntity" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.is_settlement != null">
                AND is_settlement = #{param.is_settlement,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.invite_code != null">
                AND invite_code = #{param.invite_code,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.user_appointment_id != null">
                AND user_appointment_id = #{param.user_appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.activity_id != null">
                AND activity_id = #{param.activity_id,jdbcType=BIGINT}
            </if>
            <if test="param.invite_code != null">
                AND invite_code = #{param.invite_code,jdbcType=VARCHAR}
            </if>
            <if test="param.start_time != null and param.update_time != null">
                AND rcharge_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
        </where>
        ORDER BY id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryListPageCount" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="java.lang.Integer">
        SELECT COALESCE(count(1), 0)
        FROM eg_recharge_record
        <where>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.is_settlement != null">
                AND is_settlement = #{param.is_settlement,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.activity_id != null">
                AND activity_id = #{param.activity_id,jdbcType=BIGINT}
            </if>
            <if test="param.invite_code != null">
                AND invite_code = #{param.invite_code,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.user_appointment_id != null">
                AND user_appointment_id = #{param.user_appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
        </where>
    </select>
    <select id="studyCardStatistics" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="com.huihe.eg.user.model.count.ChartParam">
        SELECT study_type,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP}, '%Y-%m')
                               THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  december,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  november,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  october,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  september,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  august,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  july,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  june,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  may,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  april,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  march,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  february,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  january,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m-%d') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP},
                                            '%Y-%m-%d') THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  yiwNum,
               sum(
                       CASE
                           WHEN (
                                   #{param.statistics_time,jdbcType=TIMESTAMP} &gt; finished_time
                                   AND finished_time &gt;
                                       date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  erNum,
               sum(
                       CASE
                           WHEN (#{param.statistics_time,jdbcType=TIMESTAMP} + - 1) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  saNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  siNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                    ) &lt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  wuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                    ) &gt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  liuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  tenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  elevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twelveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  forteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  fifteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sixteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  seventeenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eighteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyOneNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyTwoNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyThreeNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFourNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFiveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySixNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyEightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirtyNum,
               #{param.statistics_time,jdbcType=TIMESTAMP}                            yi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)  er,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)  sa,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)  si,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)  wu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)  liu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)  qi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)  eight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)  nine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)  ten,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY) eleven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY) twelve,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY) thirteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY) forteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY) fifteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY) sixteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY) seventeen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY) eighteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY) nineteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY) twenty,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY) twentyOne,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY) twentyTwo,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY) twentyThree,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY) twentyFour,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY) twentyFive,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY) twentySix,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY) twentySeven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY) twentyEight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY) twentyNine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY) thirty
        FROM eg_recharge_record
        where finished is true
          AND rcharge_type = 'study_card'
        GROUP BY study_type
    </select>
    <select id="studyCardProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam"
            parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT study_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'study_card'
          AND finished_time &lt;= #{param.statistics_time,jdbcType=TIMESTAMP}
        GROUP BY study_type
    </select>
    <select id="studyCardTotalProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT study_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'study_card'
        GROUP BY study_type
    </select>
    <select id="studyCardTodayProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT study_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'study_card'
          AND DATE_FORMAT(finished_time, '%Y-%m-%d') = DATE_FORMAT(now(), '%Y-%m-%d')
        GROUP BY study_type
    </select>
    <select id="memberAssetsStatistics" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="com.huihe.eg.user.model.count.ChartParam">
        SELECT member_level,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP}, '%Y-%m')
                               THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  december,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  november,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  october,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  september,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  august,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  july,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  june,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  may,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  april,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  march,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  february,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  january,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m-%d') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP},
                                            '%Y-%m-%d') THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  yiwNum,
               sum(
                       CASE
                           WHEN (
                                   #{param.statistics_time,jdbcType=TIMESTAMP} &gt; finished_time
                                   AND finished_time &gt;
                                       date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  erNum,
               sum(
                       CASE
                           WHEN (#{param.statistics_time,jdbcType=TIMESTAMP} + - 1) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  saNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  siNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                    ) &lt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  wuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                    ) &gt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  liuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  tenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  elevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twelveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  forteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  fifteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sixteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  seventeenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eighteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyOneNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyTwoNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyThreeNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFourNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFiveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySixNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyEightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirtyNum,
               #{param.statistics_time,jdbcType=TIMESTAMP}                            yi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)  er,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)  sa,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)  si,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)  wu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)  liu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)  qi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)  eight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)  nine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)  ten,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY) eleven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY) twelve,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY) thirteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY) forteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY) fifteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY) sixteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY) seventeen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY) eighteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY) nineteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY) twenty,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY) twentyOne,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY) twentyTwo,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY) twentyThree,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY) twentyFour,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY) twentyFive,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY) twentySix,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY) twentySeven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY) twentyEight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY) twentyNine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY) thirty
        FROM eg_recharge_record
        where finished is true
          AND rcharge_type = 'member'
        GROUP BY member_level
    </select>
    <select id="memberProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam"
            parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT member_level,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'member'
          AND finished_time &lt;= #{param.statistics_time,jdbcType=TIMESTAMP}
        GROUP BY member_level
    </select>
    <select id="memberTotalProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT member_level,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'member'
        GROUP BY member_level
    </select>
    <select id="memberTodayProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT member_level,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND rcharge_type = 'member'
          AND DATE_FORMAT(finished_time, '%Y-%m-%d') = DATE_FORMAT(now(), '%Y-%m-%d')
        GROUP BY member_level
    </select>
    <select id="accountAssetsStatistics" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="com.huihe.eg.user.model.count.ChartParam">
        SELECT
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP}, '%Y-%m')
        THEN
        1
        ELSE
        0
        END
        ) december,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) november,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) october,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) september,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) august,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) july,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') =DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) june,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) may,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) april,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) march,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) february,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 MONTH),
        '%Y-%m'
        ) THEN
        1
        ELSE
        0
        END
        ) january,
        sum(
        CASE
        WHEN DATE_FORMAT(finished_time, '%Y-%m-%d') = DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP},
        '%Y-%m-%d') THEN
        1
        ELSE
        0
        END
        ) yiwNum,
        sum(
        CASE
        WHEN (
        #{param.statistics_time,jdbcType=TIMESTAMP} &gt; finished_time
        AND finished_time &gt;
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) erNum,
        sum(
        CASE
        WHEN (#{param.statistics_time,jdbcType=TIMESTAMP} + - 1)&gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) saNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) siNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
        ) &lt; finished_time
        AND finished_time &lt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) wuNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
        ) &gt; finished_time
        AND finished_time &lt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) liuNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) sevenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) eightNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) nineNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) tenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) elevenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twelveNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
        )&gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) thirteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) forteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) fifteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) sixteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) seventeenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
        ) &gt; finished_time
        AND finished_time &gt;(
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) eighteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) nineteenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyOneNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyTwoNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyThreeNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyFourNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyFiveNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentySixNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentySevenNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyEightNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) twentyNineNum,
        sum(
        CASE
        WHEN (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
        ) &gt; finished_time
        AND finished_time &gt; (
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY)
        ) THEN
        1
        ELSE
        0
        END
        ) thirtyNum,
        #{param.statistics_time,jdbcType=TIMESTAMP} yi,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY) er,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY) sa,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY) si,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY) wu,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY) liu,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY) qi,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY) eight,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY) nine,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY) ten,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY) eleven,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY) twelve,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY) thirteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY) forteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY) fifteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY) sixteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY) seventeen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY) eighteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY) nineteen,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY) twenty,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY) twentyOne,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY) twentyTwo,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY) twentyThree,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY) twentyFour,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY) twentyFive,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY) twentySix,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY) twentySeven,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY) twentyEight,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY) twentyNine,
        date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY) thirty
        FROM
        eg_recharge_record where finished is true
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="assetsTotalProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam"
            parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        count(1) as total_num,
        SUM(amount) AS total_Acount
        FROM
        eg_recharge_record
        WHERE
        finished IS TRUE
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="assetsTodayProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam"
            parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        count(1) as total_num,
        SUM(amount) AS total_Acount
        FROM
        eg_recharge_record
        WHERE
        finished IS TRUE
        AND DATE_FORMAT(finished_time, '%Y-%m-%d') = DATE_FORMAT(now(), '%Y-%m-%d')
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="totalAssetsStatistics" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="com.huihe.eg.user.model.count.ChartParam">
        SELECT rcharge_type,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP}, '%Y-%m')
                               THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  december,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  november,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  october,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  september,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  august,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  july,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  june,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  may,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  april,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  march,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  february,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m') = DATE_FORMAT(
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 MONTH),
                                   '%Y-%m'
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  january,
               sum(
                       CASE
                           WHEN DATE_FORMAT(finished_time, '%Y-%m-%d') =
                                DATE_FORMAT(#{param.statistics_time,jdbcType=TIMESTAMP},
                                            '%Y-%m-%d') THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  yiwNum,
               sum(
                       CASE
                           WHEN (
                                   #{param.statistics_time,jdbcType=TIMESTAMP} &gt; finished_time
                                   AND finished_time &gt;
                                       date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)
                               ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  erNum,
               sum(
                       CASE
                           WHEN (#{param.statistics_time,jdbcType=TIMESTAMP} + - 1) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  saNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  siNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)
                                    ) &lt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  wuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)
                                    ) &gt; finished_time
                               AND finished_time &lt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  liuNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  tenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  elevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twelveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  forteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  fifteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  sixteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  seventeenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  eighteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  nineteenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyOneNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyTwoNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyThreeNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFourNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyFiveNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySixNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentySevenNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyEightNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  twentyNineNum,
               sum(
                       CASE
                           WHEN (
                                    date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY)
                                    ) &gt; finished_time
                               AND finished_time &gt; (
                                   date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY)
                                   ) THEN
                               1
                           ELSE
                               0
                           END
                   )                                                                  thirtyNum,
               #{param.statistics_time,jdbcType=TIMESTAMP}                            yi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 1 DAY)  er,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 2 DAY)  sa,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 3 DAY)  si,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 4 DAY)  wu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 5 DAY)  liu,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 6 DAY)  qi,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 7 DAY)  eight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 8 DAY)  nine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 9 DAY)  ten,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 10 DAY) eleven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 11 DAY) twelve,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 12 DAY) thirteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 13 DAY) forteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 14 DAY) fifteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 15 DAY) sixteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 16 DAY) seventeen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 17 DAY) eighteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 18 DAY) nineteen,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 19 DAY) twenty,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 20 DAY) twentyOne,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 21 DAY) twentyTwo,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 22 DAY) twentyThree,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 23 DAY) twentyFour,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 24 DAY) twentyFive,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 25 DAY) twentySix,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 26 DAY) twentySeven,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 27 DAY) twentyEight,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 28 DAY) twentyNine,
               date_sub(#{param.statistics_time,jdbcType=TIMESTAMP}, INTERVAL 29 DAY) thirty
        FROM eg_recharge_record
        where finished is true
        GROUP BY rcharge_type
    </select>
    <select id="totalProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam"
            parameterType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT rcharge_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND finished_time &lt;= #{param.statistics_time,jdbcType=TIMESTAMP}
        GROUP BY rcharge_type
    </select>
    <select id="totalTotalProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT rcharge_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND account IS TRUE
        GROUP BY rcharge_type
    </select>
    <select id="totalTodayProportionStatistics" resultType="com.huihe.eg.user.model.count.AssetsParam">
        SELECT rcharge_type,
               count(1)    as total_num,
               SUM(amount) AS total_Acount
        FROM eg_recharge_record
        WHERE finished IS TRUE
          AND account IS TRUE
          AND finished_time > DATE_SUB(now(), INTERVAL 1 DAY)
        GROUP BY rcharge_type
    </select>

    <select id="queryDayTotal" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="java.math.BigDecimal">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        where
        date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
        AND finished = true
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
        <if test="param.study_type != null">
            AND study_type = #{param.study_type,jdbcType=VARCHAR}
        </if>
        <if test="param.type != null">
            AND type = #{param.type,jdbcType=VARCHAR}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.source != null">
            AND source = #{param.source,jdbcType=VARCHAR}
        </if>
        <if test="param.mechanism_id != null">
            AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
        </if>
        <if test="param.status != null">
            AND status = #{param.status,jdbcType=INTEGER}
        </if>
    </select>

    <select id="queryWeekTotal" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="java.math.BigDecimal">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        where
        YEARWEEK(date_format(finished_time,'%Y-%m-%d'),1) = YEARWEEK(now(),1)
        AND finished = true
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
        <if test="param.study_type != null">
            AND study_type = #{param.study_type,jdbcType=VARCHAR}
        </if>
        <if test="param.type != null">
            AND type = #{param.type,jdbcType=VARCHAR}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.source != null">
            AND source = #{param.source,jdbcType=VARCHAR}
        </if>
        <if test="param.mechanism_id != null">
            AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
        </if>
        <if test="param.status != null">
            AND status = #{param.status,jdbcType=INTEGER}
        </if>
    </select>

    <select id="queryMonthTotal" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="java.math.BigDecimal">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        where
        DATE_FORMAT( finished_time, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
        AND finished = true
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.source != null">
            AND source = #{param.source,jdbcType=VARCHAR}
        </if>
        <if test="param.status != null">
            AND status = #{param.status,jdbcType=INTEGER}
        </if>
        <if test="param.mechanism_id != null">
            AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
        </if>
        <if test="param.study_type != null">
            AND study_type = #{param.study_type,jdbcType=VARCHAR}
        </if>
        <if test="param.type != null">
            AND type = #{param.type,jdbcType=VARCHAR}
        </if>
        <if test="param.mechanism_id != null">
            AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
        </if>
        <if test="param.status != null">
            AND status = #{param.status,jdbcType=INTEGER}
        </if>
    </select>

    <select id="queryPayTotal" parameterType="com.huihe.eg.user.model.RechargeRecordEntity"
            resultType="java.math.BigDecimal">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        <where>
            <if test="param.rcharge_type != null">
                rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.finished == null">
                AND finished = true
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.start_time!=null and param.update_time!=null">
                AND finished_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
        </where>
    </select>
    <select id="queryDayCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(count(1),0)
        from
        eg_recharge_record
        <where>
            date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
            <if test="param.rcharge_type != null">
                rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
        </where>
    </select>
    <select id="queryDayList" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        from eg_recharge_record
        where
        date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.mechanism_id != null">
            AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
        </if>
        <if test="param.status != null">
            AND status = #{param.status,jdbcType=INTEGER}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
    </select>
    <select id="queryMechanismMounthTotal" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(amount), 0)
        FROM `eg_recharge_record`
        WHERE mechanism_id = #{id}
          AND finished = 1
          AND finished_time > DATE_SUB(now(), INTERVAL 1 MONTH)
    </select>
    <select id="queryOrderList" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        from eg_recharge_record
        <where>
            <choose>
                <when test="param.study_type != null">
                    AND study_type = #{param.study_type,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND (study_type = 'exclusive_courses' or study_type = 'recording' or study_type =
                    'mechanism_offline')
                </otherwise>
            </choose>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.user_id != null and param.user_id != 0">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null and param.master_id != 0">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null and param.mechanism_id != 0">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
            <if test="param.start_time!=null">
                AND DATE_FORMAT(create_time,'yyyy-MM') = DATE_FORMAT(#{param.start_time,jdbcType=TIMESTAMP},'yyyy-MM')
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.status == null">
                AND status in (3,2)
            </if>
        </where>
        ORDER BY id DESC limit #{param.startRow},#{param.pageSize}
    </select>

    <select id="queryWeekCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(count(1),0)
        FROM
        eg_recharge_record
        where
        finished_time > DATE_SUB(now(),INTERVAL 1 WEEK)
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
        <if test="param.study_type != null">
            AND study_type = #{param.study_type,jdbcType=VARCHAR}
        </if>
        <if test="param.type != null">
            AND type = #{param.type,jdbcType=VARCHAR}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.source != null">
            AND source = #{param.source,jdbcType=VARCHAR}
        </if>
    </select>
    <select id="queryMonthCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(count(1),0)
        FROM
        eg_recharge_record
        where
        DATE_FORMAT( finished_time, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
        <if test="param.rcharge_type != null">
            AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
        </if>
        <if test="param.study_type != null">
            AND study_type = #{param.study_type,jdbcType=VARCHAR}
        </if>
        <if test="param.type != null">
            AND type = #{param.type,jdbcType=VARCHAR}
        </if>
        <if test="param.finished != null">
            AND finished = #{param.finished,jdbcType=BIT}
        </if>
        <if test="param.is_teach_paypal != null">
            AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
        </if>
        <if test="param.source != null">
            AND source = #{param.source,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="queryPayCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(count(amount),0)
        FROM
        eg_recharge_record
        <where>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <select id="queryThisDay" resultType="java.math.BigDecimal">
        select COALESCE(sum(amount), 0)
        from eg_recharge_record
        <where>
            date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
            <if test="param.id != null">
                AND mechanism_id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
        </where>
    </select>
    <select id="querySaleCourse" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        select
        <include refid="Base_Column_List"/>
        from eg_recharge_record
        <where>
            finished = true
            <if test="param.start_time!=null and param.update_time!=null">
                AND finished_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_type == null">
                AND (rcharge_type = 'offline_class' or rcharge_type = 'study_card' or rcharge_type ='mechanism_offline')
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_type != null">
                AND (study_type = 'exclusive_courses' or study_type = 'recording' or study_type = 'mechanism_offline')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY finished_time DESC limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryDayCash" resultType="java.math.BigDecimal">
        select coalesce(sum(amount),0)
        from eg_recharge_record
        <where>
            finished = true
            AND date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
            <if test="param.mechanism_id!=null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
        </where>
    </select>

    <select id="queryMonthCash" resultType="java.math.BigDecimal">
        select coalesce(sum(amount),0)
        from eg_recharge_record
        <where>
            finished = true
            AND DATE_FORMAT( finished_time, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            <if test="param.mechanism_id!=null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
        </where>
    </select>

    <select id="queryTotalCash" resultType="java.math.BigDecimal">
        select coalesce(sum(amount),0)
        from eg_recharge_record
        <where>
            finished = true
            <if test="param.mechanism_id!=null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
        </where>
    </select>
    <select id="queryCardList" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            finished = true
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND (study_type = #{param.study_type,jdbcType=VARCHAR} or study_type =
                CONCAT(#{param.study_type,jdbcType=VARCHAR},'_special'))
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>
        ORDER BY id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryCardListCount" resultType="java.lang.Integer">
        SELECT
        coalesce(count(1),0)
        FROM eg_recharge_record
        <where>
            finished = true
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryCardDayCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        <where>
            date_format(finished_time,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')
            AND finished = true
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryCardWeekCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        <where>
            YEARWEEK(date_format(finished_time,'%Y-%m-%d'),1) = YEARWEEK(now(),1)
            AND finished = true
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryCardMonthCount" resultType="java.lang.Integer">
        SELECT
        COALESCE(SUM(amount),0)
        FROM
        eg_recharge_record
        <where>
            DATE_FORMAT( finished_time, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            AND finished = true
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>

    </select>
    <select id="queryCardPayListByNickName" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            finished = true
            <if test="param.nickNameIDs!=null">
                AND user_id in
                <foreach item="item" index="index" collection="param.nickNameIDs" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="param.start_time != null and param.update_time != null">
                AND finished_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
        </where>
        ORDER BY id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryCardPayListByNickNameCount" resultType="java.lang.Integer">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            finished = true
            <if test="param.nickNameIDs!=null">
                AND user_id in
                <foreach item="item" index="index" collection="param.nickNameIDs" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null ">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'study_card'.toString()">
                AND (study_type = 'cross_border' or study_type = 'mother_tongue' or study_type = 'major'
                or study_type = 'cross_border_special' or study_type = 'mother_tongue_special' or study_type =
                'major_special')
            </if>
            <if test="param.study_type == null and param.rcharge_type == 'class_card'.toString()">
                AND (study_type = 'minute' or study_type = 'curriculum')
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="querySaleCardCash" resultType="java.math.BigDecimal">
        SELECT coalesce(sum(amount), 0)
        FROM eg_recharge_record
        where appointment_id = #{id}
          and mechanism_id = 0
          and master_id = 0
    </select>
    <select id="querySaleCourseCash" resultType="java.math.BigDecimal">
        SELECT coalesce(sum(amount), 0)
        FROM eg_recharge_record
        where appointment_id = #{id}
          and mechanism_id &lt;&gt; 0
          and master_id &lt;&gt; 0
    </select>
    <select id="queryIfByCard" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        where user_id = #{param.user_id,jdbcType=BIGINT}
        and (rcharge_type = 'study_card' or rcharge_type = 'class_card')
        and is_experience = true
        and mechanism_id = 0
        and master_id = 0
    </select>
    <select id="queryOrderListCount" resultType="java.lang.Integer">
        SELECT
        coalesce(count(1),0)
        from eg_recharge_record
        <where>
            <choose>
                <when test="param.study_type != null">
                    AND study_type = #{param.study_type,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND (study_type = 'exclusive_courses' or study_type = 'recording' or study_type =
                    'mechanism_offline')
                </otherwise>
            </choose>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryTimeOUtLIst" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            rcharge_time >= DATE_SUB(NOW(),INTERVAL 14 DAY)
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
        </where>
    </select>
    <select id="queryMoreThan1" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.status == null">
                AND status in (2,3)
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.start_time != null and param.update_time != null">
                AND rcharge_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
        </where>
        ORDER BY id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryListPageByStatus" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.amount == null">
                AND amount &lt;&gt; 0
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.user_appointment_id != null">
                AND user_appointment_id = #{param.user_appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.start_time != null and param.update_time != null">
                AND rcharge_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
        </where>
        ORDER BY id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="queryNeedSettlementList" resultType="com.huihe.eg.user.model.RechargeRecordEntity">
        SELECT
        <include refid="Base_Column_List"/>
        FROM eg_recharge_record
        <where>
            finished_time > date_sub(now() interval 7 day)
            <if test="param.id != null">
                AND id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.user_id != null">
                AND user_id = #{param.user_id,jdbcType=BIGINT}
            </if>
            <if test="param.rcharge_abstract != null">
                AND rcharge_abstract = #{param.rcharge_abstract,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_account != null">
                AND rcharge_account = #{param.rcharge_account,jdbcType=VARCHAR}
            </if>
            <if test="param.source != null">
                AND source = #{param.source,jdbcType=VARCHAR}
            </if>
            <if test="param.amount != null">
                AND amount = #{param.amount,jdbcType=DECIMAL}
            </if>
            <if test="param.rcharge_valid != null">
                AND rcharge_valid = #{param.rcharge_valid,jdbcType=VARCHAR}
            </if>
            <if test="param.rcharge_time != null">
                AND rcharge_time = #{param.rcharge_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.flowing_no != null">
                AND flowing_no = #{param.flowing_no,jdbcType=VARCHAR}
            </if>
            <if test="param.trans_no != null">
                AND trans_no = #{param.trans_no,jdbcType=VARCHAR}
            </if>
            <if test="param.finished_time != null">
                AND finished_time = #{param.finished_time,jdbcType=TIMESTAMP}
            </if>
            <if test="param.rcharge_type != null">
                AND rcharge_type = #{param.rcharge_type,jdbcType=VARCHAR}
            </if>
            <if test="param.selected_id != null">
                AND selected_id = #{param.selected_id,jdbcType=VARCHAR}
            </if>
            <if test="param.finished != null">
                AND finished = #{param.finished,jdbcType=BIT}
            </if>
            <if test="param.is_teach_paypal != null">
                AND is_teach_paypal = #{param.is_teach_paypal,jdbcType=BIT}
            </if>
            <if test="param.is_settlement != null">
                AND is_settlement = #{param.is_settlement,jdbcType=BIT}
            </if>
            <if test="param.status != null">
                AND status = #{param.status,jdbcType=INTEGER}
            </if>
            <if test="param.member_level != null">
                AND member_level = #{param.member_level,jdbcType=INTEGER}
            </if>
            <if test="param.account != null">
                AND account = #{param.account,jdbcType=BIT}
            </if>
            <if test="param.is_robot != null">
                AND is_robot = #{param.is_robot,jdbcType=BIT}
            </if>
            <if test="param.receipt_data != null">
                AND receipt_data = #{param.receipt_data,jdbcType=VARCHAR}
            </if>
            <if test="param.member_duration != null">
                AND member_duration = #{param.member_duration,jdbcType=INTEGER}
            </if>
            <if test="param.study_type != null">
                AND study_type = #{param.study_type,jdbcType=VARCHAR}
            </if>
            <if test="param.invite_code != null">
                AND invite_code = #{param.invite_code,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_ids != null">
                AND coupon_ids = #{param.coupon_ids,jdbcType=VARCHAR}
            </if>
            <if test="param.coupon_id != null">
                AND coupon_id = #{param.coupon_id,jdbcType=BIGINT}
            </if>
            <if test="param.type != null">
                AND type = #{param.type,jdbcType=VARCHAR}
            </if>
            <if test="param.course_num != null">
                AND course_num = #{param.course_num,jdbcType=INTEGER}
            </if>
            <if test="param.number_of_lessons != null">
                AND number_of_lessons = #{param.number_of_lessons,jdbcType=INTEGER}
            </if>
            <if test="param.studycard_id != null">
                AND studycard_id = #{param.studycard_id,jdbcType=BIGINT}
            </if>
            <if test="param.class_card_id != null">
                AND class_card_id = #{param.class_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.appointment_id != null">
                AND appointment_id = #{param.appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.user_appointment_id != null">
                AND user_appointment_id = #{param.user_appointment_id,jdbcType=BIGINT}
            </if>
            <if test="param.mechanism_id != null">
                AND mechanism_id = #{param.mechanism_id,jdbcType=BIGINT}
            </if>
            <if test="param.master_id != null">
                AND master_id = #{param.master_id,jdbcType=BIGINT}
            </if>
            <if test="param.pay_deposit_id != null">
                AND pay_deposit_id = #{param.pay_deposit_id,jdbcType=BIGINT}
            </if>
            <if test="param.is_experience != null">
                AND is_experience = #{param.is_experience,jdbcType=BIGINT}
            </if>
            <if test="param.is_one_time_payment != null">
                AND is_one_time_payment = #{param.is_one_time_payment,jdbcType=BIT}
            </if>
            <if test="param.user_study_card_id != null">
                AND user_study_card_id = #{param.user_study_card_id,jdbcType=BIGINT}
            </if>
            <if test="param.start_time != null and param.update_time != null">
                AND rcharge_time between #{param.start_time,jdbcType=TIMESTAMP}
                AND #{param.update_time,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>
    <select id="queryPayUserList" resultType="com.huihe.eg.user.model.PayUserInfoEntity">
        SELECT
        <include refid="Base_Pay_User_List"/>
        FROM
        eg_recharge_record r
        INNER JOIN eg_user_info u ON u.user_id = r.user_id
        <where>
            <if test="param.id != null">
                AND r.id = #{param.id,jdbcType=BIGINT}
            </if>
            <if test="param.id == null">
                r.activity_id = #{param.activity_id,jdbcType=BIGINT}
                AND finished = true
                AND r.rcharge_type = 'coupon_198'
            </if>
        </where>
        ORDER BY r.id DESC
        limit #{param.startRow},#{param.pageSize}
    </select>
    <select id="selectLastInsertId" resultType="java.lang.Long">
        SELECT LAST_INSERT_ID();
    </select>
</mapper>